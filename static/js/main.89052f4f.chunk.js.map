{"version":3,"sources":["../node_modules/encoding/lib sync","components/fileDropZone.js","components/ImportData.js","tfjs-model/script.js","components/main.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","FileDropZone","onDrop","files","url","map","src","a","URL","createObjectURL","props","inf","imgtobase","then","response","imgSrc","dndCall","previewCanvas","document","createElement","previewCtx","getContext","width","height","style","objectFit","marginRight","borderRadius","imageObj","Image","onload","drawImage","this","trainingCanvas","trainingCtx","imageObj1","getRootProps","getInputProps","position","marginTop","marginLeft","borderStyle","borderWidth","padding","color","fontFamily","fontSize","marginBottom","Component","ImportData","previewCanvasArr","trainingCanvasArr","getFromChild","push","setState","state","selectedFile","className","pKeyId","convertSignal","sendDataToTrain","previewList","getElementById","Grid","Row","Col","xs","md","lg","display","flexDirection","listStyle","canvas","index","listItem","appendChild","connect","tf","require","enableProdMode","console","log","img_to_tensor","img","tidy","browser","fromPixels","expandDims","toFloat","div","scalar","sub","infer_model","tens","loadGraphModel","model","predict","preds","argMax","data","Main","classArray","samplesJSON","Object","ctr","classNArr","epochs","batchSize","learningRate","handleAddClass","startLearning","bind","classNo","enableLearning","globalTrainingStatus","classIndex","imageNetData","Button","onClick","dispatch","sSignal","type","App","Boolean","window","location","hostname","match","initState","rootReducer","action","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89052f4f.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 173;","import React, { Component } from \"react\";\r\nimport imgtobase from \"image-to-base64\";\r\nimport Dropzone from \"react-dropzone\";\r\n\r\nclass FileDropZone extends Component {\r\n  onDrop = (files) => {\r\n    let url\r\n    files.map( async (src) => {\r\n      if (src[\"type\"] === \"image/jpeg\" || src[\"type\"] === \"image/png\") {\r\n        url = URL.createObjectURL(src);\r\n        if(this.props.inf) {\r\n          let imgSrc\r\n          await imgtobase(url).then(response => {\r\n            imgSrc = \"data:image/png;base64,\" + response;\r\n          })\r\n          this.props.dndCall(imgSrc);\r\n        } else {\r\n          let previewCanvas = document.createElement(\"canvas\");\r\n          let previewCtx = previewCanvas.getContext(\"2d\");\r\n          previewCanvas.width = 50;\r\n          previewCanvas.height = 50;\r\n          previewCanvas.style.objectFit = \"cover\";\r\n          previewCanvas.style.marginRight = \"7px\";\r\n          previewCanvas.style.borderRadius = \"4px\";\r\n          // load image from data url\r\n          let imageObj = new Image();\r\n          imageObj.onload = function () {\r\n            previewCtx.drawImage(this, 0, 0, 50, 50);\r\n          };\r\n          imageObj.src = url;\r\n          \r\n          let trainingCanvas = document.createElement(\"canvas\");\r\n          let trainingCtx = trainingCanvas.getContext(\"2d\");\r\n          trainingCanvas.width = 224;\r\n          trainingCanvas.height = 224;\r\n          trainingCanvas.style.objectFit = \"cover\";\r\n          // load image from data url\r\n          let imageObj1 = new Image();\r\n          imageObj1.onload = function () {\r\n            trainingCtx.drawImage(this, 0, 0, 224, 224);\r\n          };\r\n          imageObj1.src = url;\r\n          this.props.dndCall(previewCanvas, trainingCanvas);\r\n        }\r\n\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {    \r\n    return (\r\n      <Dropzone onDrop={this.onDrop}>\r\n        {({ getRootProps, getInputProps }) => (\r\n          <div style={{ position: \"relative\" }}>\r\n            <div\r\n              {...getRootProps()}\r\n              style={{\r\n                marginTop: \"30px\",\r\n                marginLeft: \"30px\",\r\n                marginRight: \"25px\",\r\n                borderStyle: \"dashed\",\r\n                borderWidth: \"1px\",\r\n                height: \"172px\",\r\n                width: '312px',\r\n                padding: \"50px\",\r\n                color: \" #475A82\",\r\n              }}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <center>\r\n                <p\r\n                  style={{\r\n                    fontFamily: \"Helvetica\",\r\n                    fontSize: \"12px\",\r\n                    color: \" #475A82\",\r\n                    marginBottom: \"10px\",\r\n                  }}\r\n                >\r\n                  Upload or drag and drop your files here\r\n                </p>\r\n              </center>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileDropZone;\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Col, Row } from \"react-bootstrap\";\r\nimport FileDropZone from \"./fileDropZone\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ImportData extends Component {\r\n  previewCanvasArr = [];\r\n  trainingCanvasArr = [];\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedFile: [],\r\n      className: \"Class \" + this.props.pKeyId,\r\n    };\r\n  }\r\n\r\n  getFromChild = (previewCanvas, trainingCanvas) => {\r\n    this.previewCanvasArr.push(previewCanvas);\r\n    this.trainingCanvasArr.push(trainingCanvas);\r\n    this.setState({});\r\n  };\r\n\r\n  render() {\r\n    if (this.props.convertSignal)\r\n      this.props.sendDataToTrain(this.trainingCanvasArr);\r\n\r\n    this.previewList = document.getElementById(\"picArray\" + this.props.pKeyId);\r\n    return (\r\n      <Grid>\r\n        <div>\r\n          <Row>\r\n            <Col xs={12} md={12} lg={12}>\r\n              <center>\r\n                <FileDropZone dndCall={this.getFromChild} />\r\n              </center>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={10}>\r\n              <ul\r\n                id={\"picArray\" + this.props.pKeyId}\r\n                style={{\r\n                  marginTop: \"12.5px\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  listStyle: \"none\",\r\n                }}\r\n              >\r\n                {(this.previewCanvasArr || []).map((canvas, index) => {\r\n                  let listItem = document.createElement(\"li\");\r\n                  listItem.style.listStyle = \"none\";\r\n                  listItem.appendChild(canvas);\r\n                  this.previewList.appendChild(listItem);\r\n                })}\r\n              </ul>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    convertSignal: state.convertSignal,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(ImportData);\r\n","// load tensorflow\r\nlet tf = require(\"@tensorflow/tfjs\");\r\ntf.enableProdMode();\r\n\r\nconsole.log(\"yeeterson\");\r\n\r\n//const INDEXED_DB_URL = \"indexeddb://modebile\";\r\n\r\nconst img_to_tensor = (img) => {\r\n  return tf.tidy(() => {\r\n    const img_tensor = tf.browser.fromPixels(img);\r\n\r\n    // add an outer dimension\r\n    const batch_tensor = img_tensor.expandDims(0);\r\n    const norm_tensor = batch_tensor\r\n      .toFloat()\r\n      .div(tf.scalar(127))\r\n      .sub(tf.scalar(1));\r\n    return norm_tensor;\r\n  });\r\n};\r\n\r\nexport async function infer_model(img) {\r\n  let tens = await img_to_tensor(img);\r\n  const model = await tf.loadGraphModel(\r\n    \"https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json\"\r\n  );\r\n  let preds = await model.predict(tens);\r\n  const axis = 1;\r\n  const index = await preds.argMax(axis).data();\r\n  return index;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ImportData from \"./ImportData\";\r\nimport { Grid, Col, Row, Button } from \"react-bootstrap\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport { connect } from \"react-redux\";\r\nimport imageNetData from \"../image_net/imagenet_class_index.json\";\r\n\r\nimport { infer_model } from \"../tfjs-model/script\";\r\n\r\nclass Main extends Component {\r\n  classArray = [];\r\n  samplesJSON = new Object();\r\n  ctr = 0;\r\n  classNArr = [];\r\n  epochs = 25; //CHANGE EPOCHS VALUE HERE\r\n  batchSize = 16; //CHANGE BATCHSIZE VALUE HERE\r\n  learningRate = 0.001;\r\n  className = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.classArray.push(\r\n      <ImportData\r\n        pKeyId={this.ctr}\r\n        sendDataToTrain={this.startLearning.bind(this)}\r\n      />\r\n    );\r\n    this.state = {\r\n      classNo: null,\r\n    };\r\n  }\r\n\r\n  //Handles to add multiple ImportData Component\r\n  handleAddClass = () => {\r\n    this.ctr += 1;\r\n    this.classArray.push(\r\n      <ImportData\r\n        pKeyId={this.ctr}\r\n        sendDataToTrain={this.startLearning.bind(this)}\r\n      />\r\n    );\r\n    this.setState({\r\n      classNo: this.classArray,\r\n    });\r\n  };\r\n\r\n  enableLearning = () => {\r\n    this.props.globalTrainingStatus(true);\r\n  };\r\n\r\n  async startLearning(data) {\r\n    let classIndex = await infer_model(data[0]);\r\n    this.className = (\r\n      <div>\r\n        <h1>{imageNetData[classIndex]}</h1>\r\n      </div>\r\n    );\r\n    this.setState({})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid>\r\n        <Col xs={4} md={4} lg={4}>\r\n          {this.classArray.map((classArray) => classArray)}\r\n          <Row>\r\n            <Col>\r\n              <center>\r\n                <Button onClick={this.enableLearning}>Predict</Button>\r\n              </center>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Row>\r\n          {this.className}\r\n        </Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    //changing store to stop training\r\n    globalTrainingStatus: (sSignal) => {\r\n      dispatch({\r\n        type: \"STOP_TRAINING\",\r\n        sSignal: sSignal,\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Main);\r\n","import React, { Component } from \"react\";\nimport Main from \"./components/main\";\n\nclass App extends Component {\n  render() {\n    return <Main />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n  convertSignal: false,\r\n};\r\nconst rootReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    //TO PREVENT FURTHER ADDITION IMAGE TO GET TRAININED\r\n    case \"STOP_TRAINING\":\r\n      return {\r\n        ...state,\r\n        convertSignal: action.sSignal,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}